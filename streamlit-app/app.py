"""
Akceler√°tor altruismu - Czech Cultural Adaptation + Phase 3 Enhancement
Praktick√Ω n√°stroj pro transformaci empatie v konkr√©tn√≠ akce
Enhanced with language support, Czech cultural adaptation, and advanced features
"""

import streamlit as st
import json
import os
import random
from datetime import datetime, timedelta
import uuid
from typing import Dict, List, Any
import math

# Configure page
st.set_page_config(
    page_title="Akceler√°tor altruismu",
    page_icon="üá®üáø",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Enhanced CSS for Czech cultural adaptation - Comprehensive UX/UI Refactor
st.markdown("""
<style>
    /* Enhanced Typography Hierarchy */
    .main-header {
        font-size: clamp(2rem, 5vw, 2.8rem);
        color: #2E5D31;
        text-align: center;
        margin-bottom: 1.5rem;
        font-weight: 700;
        line-height: 1.2;
        text-shadow: 0 2px 4px rgba(46, 93, 49, 0.1);
        animation: fadeInDown 0.6s ease-out;
    }
    .sub-header {
        font-size: clamp(1.1rem, 3vw, 1.3rem);
        color: #5A6B5A;
        text-align: center;
        margin-bottom: 2.5rem;
        font-style: normal;
        font-weight: 400;
        line-height: 1.5;
        animation: fadeIn 0.8s ease-out 0.2s both;
    }
    .section-header {
        font-size: clamp(1.4rem, 4vw, 1.8rem);
        color: #2E5D31;
        margin-bottom: 1.5rem;
        font-weight: 600;
        border-bottom: 2px solid #A8D5A8;
        padding-bottom: 0.5rem;
    }
    
    /* Enhanced Card System with better alignment */
    .cause-card {
        border: 1px solid #A8D5A8;
        border-radius: 16px;
        padding: 2rem;
        margin: 1.5rem 0;
        background: linear-gradient(135deg, #F8FDF8 0%, #F0F8F0 100%);
        box-shadow: 0 4px 8px rgba(0,0,0,0.06), 0 1px 3px rgba(0,0,0,0.1);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border-top: 3px solid transparent;
        height: 100%; /* Equal height cards */
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    .cause-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.12), 0 3px 6px rgba(0,0,0,0.08);
        border-color: #7AB87A;
        border-top-color: #7AB87A;
        background: linear-gradient(135deg, #F9FEF9 0%, #F2F9F2 100%);
    }
    .action-card {
        border: 1px solid #C4E4C4;
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1rem 0;
        background: linear-gradient(135deg, #FAFBFA 0%, #F5F7F5 100%);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 2px 4px rgba(0,0,0,0.04);
        border-left: 4px solid transparent;
        height: 100%; /* Equal height cards */
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    .action-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.08), 0 2px 6px rgba(0,0,0,0.04);
        border-color: #9BC89B;
        border-left-color: #7AB87A;
        background: linear-gradient(135deg, #FBFCFB 0%, #F6F8F6 100%);
    }
    
    /* Enhanced Button System with proper alignment */
    .stButton > button {
        background: linear-gradient(135deg, #7AB87A 0%, #5A9B5A 100%) !important;
        color: white !important;
        border: none !important;
        border-radius: 10px !important;
        padding: 0.75rem 1.5rem !important;
        font-weight: 600 !important;
        font-size: 0.95rem !important;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
        box-shadow: 0 3px 6px rgba(122, 184, 122, 0.3) !important;
        text-transform: none !important;
        letter-spacing: 0.01em !important;
        width: 100% !important; /* Full width for consistent alignment */
        margin: 0.25rem 0 !important;
    }
    .stButton > button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 12px rgba(122, 184, 122, 0.4) !important;
        background: linear-gradient(135deg, #8BC88B 0%, #6BAC6B 100%) !important;
    }
    .stButton > button:active {
        transform: translateY(0) !important;
        box-shadow: 0 2px 4px rgba(122, 184, 122, 0.3) !important;
    }
    
    /* Enhanced CTA section with proper spacing */
    .cta-section {
        background: linear-gradient(135deg, #F5F8F5 0%, #EBF2EB 100%);
        border-radius: 16px;
        padding: 2rem;
        margin: 2rem 0;
        text-align: center;
        border: 1px solid #D4E7D4;
        box-shadow: 0 4px 8px rgba(0,0,0,0.06);
    }
    
    /* Action grid with better alignment */
    .action-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
        margin: 2rem 0;
        align-items: stretch; /* Equal height */
    }
    
    /* Quote box positioned correctly */
    .quote-box {
        background: linear-gradient(135deg, #F5F8F5 0%, #EDF2ED 100%);
        border-left: 3px solid #7AB87A;
        padding: 1.5rem;
        margin: 2rem auto;
        font-style: italic;
        border-radius: 6px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.08);
        max-width: 600px;
        text-align: center;
        font-size: 1.1rem;
        line-height: 1.6;
    }
    
    /* POC disclaimer badge */
    .poc-badge {
        position: fixed;
        bottom: 20px;
        left: 20px;
        background: rgba(122, 184, 122, 0.9);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        z-index: 1000;
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }
    
    /* Emergency help widget positioned correctly */
    .emergency-help {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: #FF6B6B;
        color: white;
        padding: 1rem;
        border-radius: 12px;
        font-weight: 600;
        z-index: 1000;
        box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);
        max-width: 250px;
    }
    
    /* Progress text styling */
    .progress-text {
        font-size: 0.9rem;
        color: #4A5E4A;
        text-align: center;
        font-weight: 500;
        margin: 1rem 0;
    }
    
    /* Celebration messages */
    .celebration {
        background: linear-gradient(45deg, #7AB87A, #9BC89B);
        color: white;
        padding: 1.2rem;
        border-radius: 10px;
        text-align: center;
        font-weight: 600;
        animation: gentleGlow 1.5s ease-in-out;
        text-shadow: 0 1px 2px rgba(0,0,0,0.2);
        margin: 1rem 0;
    }
    @keyframes gentleGlow {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.02); }
    }
    .quiet-celebration {
        background: linear-gradient(135deg, #E8F5E8 0%, #D4E7D4 100%);
        color: #2E5D31;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        font-weight: 500;
        border-left: 4px solid #7AB87A;
        margin: 1rem 0;
    }
    
    /* Impact metrics with better alignment */
    .impact-metric {
        text-align: center;
        padding: 1.2rem;
        background: linear-gradient(135deg, #F0F8F0 0%, #E8F2E8 100%);
        border-radius: 12px;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.08);
        border: 1px solid #D4E7D4;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }
    
    /* Success story cards */
    .success-story {
        background: linear-gradient(135deg, #F8FBF8 0%, #F0F6F0 100%);
        border-radius: 10px;
        padding: 1.2rem;
        margin: 1rem 0;
        border: 1px solid #E0EBE0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.08);
        height: 100%;
    }
    
    /* Streak indicator */
    .streak-indicator {
        background: linear-gradient(45deg, #7AB87A, #5A9B5A);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        display: inline-block;
        margin: 0.2rem;
    }
    
    /* Enhanced Layout System with better spacing */
    .content-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1rem 2rem;
    }
    .card-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
        margin: 2rem 0;
        align-items: stretch;
    }
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 2rem 0;
        align-items: stretch;
    }
    
    /* Enhanced form styling */
    .stSelectbox > div > div {
        border-radius: 8px !important;
        border: 2px solid #C4E4C4 !important;
        transition: all 0.3s ease !important;
    }
    .stSelectbox > div > div:focus-within {
        border-color: #7AB87A !important;
        box-shadow: 0 0 0 3px rgba(122, 184, 122, 0.1) !important;
    }
    
    /* Enhanced multiselect */
    .stMultiSelect > div > div {
        border-radius: 8px !important;
        border: 2px solid #C4E4C4 !important;
    }
    .stMultiSelect > div > div:focus-within {
        border-color: #7AB87A !important;
        box-shadow: 0 0 0 3px rgba(122, 184, 122, 0.1) !important;
    }
    
    /* Enhanced radio buttons with proper spacing */
    .stRadio > div {
        gap: 1rem !important;
    }
    .stRadio > div > label {
        padding: 0.75rem 1rem !important;
        border-radius: 8px !important;
        border: 1px solid #C4E4C4 !important;
        background: #FAFBFA !important;
        transition: all 0.3s ease !important;
        cursor: pointer !important;
        margin: 0.25rem 0 !important;
        display: block !important;
    }
    .stRadio > div > label:hover {
        background: #F0F8F0 !important;
        border-color: #9BC89B !important;
    }
    
    /* Progress bars styling */
    .stProgress > div > div {
        background: linear-gradient(90deg, #7AB87A 0%, #5A9B5A 100%) !important;
        border-radius: 10px !important;
        height: 8px !important;
    }
    .stProgress > div {
        background-color: #E0EBE0 !important;
        border-radius: 10px !important;
        height: 8px !important;
    }
    
    /* Responsive Design Improvements */
    @media (max-width: 768px) {
        .content-container {
            padding: 1rem;
        }
        .main-header {
            font-size: 1.8rem !important;
            margin-bottom: 1rem !important;
        }
        .sub-header {
            font-size: 1rem !important;
            margin-bottom: 1.5rem !important;
        }
        .cause-card, .action-card {
            padding: 1rem !important;
            margin: 0.75rem 0 !important;
        }
        .card-grid, .action-grid {
            grid-template-columns: 1fr !important;
            gap: 1rem !important;
        }
        .stats-grid {
            grid-template-columns: 1fr !important;
            gap: 0.75rem !important;
        }
        .poc-badge {
            bottom: 80px !important;
            left: 10px !important;
            font-size: 0.7rem !important;
        }
        .emergency-help {
            bottom: 10px !important;
            right: 10px !important;
            max-width: 200px !important;
            padding: 0.75rem !important;
        }
    }
    
    /* Enhanced Accessibility */
    .stButton > button:focus {
        outline: 3px solid rgba(122, 184, 122, 0.5) !important;
        outline-offset: 2px !important;
    }
    .cause-card:focus, .action-card:focus {
        outline: 2px solid #7AB87A !important;
        outline-offset: 2px !important;
    }
    
    /* Animation keyframes */
    @keyframes fadeInDown {
        from { opacity: 0; transform: translateY(-20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'user_id' not in st.session_state:
    st.session_state.user_id = f"user_{uuid.uuid4().hex[:8]}"
if 'language' not in st.session_state:
    st.session_state.language = 'czech'
if 'assessment_step' not in st.session_state:
    st.session_state.assessment_step = 0
if 'user_profile' not in st.session_state:
    st.session_state.user_profile = {}
if 'actions_completed' not in st.session_state:
    st.session_state.actions_completed = []
if 'total_impact' not in st.session_state:
    st.session_state.total_impact = {'actions': 0, 'time': 0, 'money': 0}
if 'streak_count' not in st.session_state:
    st.session_state.streak_count = 0
if 'last_action_date' not in st.session_state:
    st.session_state.last_action_date = None
if 'seasonal_challenge' not in st.session_state:
    st.session_state.seasonal_challenge = None

# Advanced data loading functions with language support
@st.cache_data
def load_causes_data(language='czech'):
    """Load causes data based on language"""
    try:
        if language == 'czech':
            with open('data/czech/causes_czech.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
        else:
            with open('data/international/causes.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
        return data.get('causes', {})
    except (FileNotFoundError, json.JSONDecodeError, UnicodeDecodeError) as e:
        st.warning(f"Causes data file issue for {language}. Using fallback. Error: {str(e)}")
        return {}

@st.cache_data
def load_actions_data(language='czech'):
    """Load actions data based on language"""
    try:
        if language == 'czech':
            with open('data/czech/actions_czech.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
        else:
            with open('data/international/actions.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
        return data.get('actions', {})
    except (FileNotFoundError, json.JSONDecodeError, UnicodeDecodeError) as e:
        st.warning(f"Actions data file issue for {language}. Error: {str(e)}")
        return {}

@st.cache_data
def load_encouragement_data(language='czech'):
    """Load encouragement messages with robust error handling"""
    fallback_data = {
        'czech': {
            "welcome_messages": [
                "Najdi praktick√Ω zp≈Øsob, jak pomoct ‚Äì krok za krokem.",
                "Ka≈æd√Ω mal√Ω krok pom√°h√°. Zaƒçneme tam, kde se c√≠t√≠≈° p≈ôipraven/a.",
                "Nen√≠ pot≈ôeba mƒõnit svƒõt najednou. Staƒç√≠ zaƒç√≠t tam, kde jsi."
            ],
            "emotional_state_responses": {
                "zahlcen": ["Je norm√°ln√≠ c√≠tit se zahlcen/a. Probl√©my jsou velik√©, ale lidsk√° schopnost pom√°hat tak√©."],
                "frustrov√°n": ["Ta frustrace je energie. Ukazuje, ≈æe jsi p≈ôipraven/a na skuteƒçnou zmƒõnu."],
                "nadƒõjn√Ω": ["Tvoje nadƒõje je naka≈æliv√° a svƒõt ji pr√°vƒõ teƒè pot≈ôebuje."],
                "provinile": ["Pocit viny ukazuje, ≈æe tvoje hodnoty jsou v po≈ô√°dku, ale akce je u≈æiteƒçnƒõj≈°√≠ ne≈æ vina."],
                "motivov√°n": ["Ta energie je zlat√°! Pojƒème se ujistit, ≈æe je smƒõ≈ôov√°na tam, kde m≈Ø≈æe m√≠t nejvƒõt≈°√≠ dopad."],
                "nejist√Ω": ["Nevƒõdƒõt, kde zaƒç√≠t, je nejup≈ô√≠mnƒõj≈°√≠ reakce na slo≈æit√© probl√©my."]
            },
            "action_completion_celebrations": [
                "V√Ωbornƒõ! Pr√°vƒõ jsi udƒõlal/a nƒõco praktick√©ho pro zlep≈°en√≠ svƒõta.",
                "Dob≈ôe! Tahle akce bude m√≠t dopad zp≈Øsoby, o kter√Ωch mo≈æn√° nikdy nebude≈° vƒõdƒõt."
            ],
            "progress_encouragement": [
                "Ka≈æd√° akce, kterou udƒõl√°≈°, dokazuje, ≈æe jednotlivci mohou vytv√°≈ôet zmƒõnu.",
                "Nepom√°h√°≈° jen ostatn√≠m ‚Äì st√°v√°≈° se ƒçlovƒõkem, kter√Ωm chce≈° b√Ωt."
            ]
        },
        'english': {
            "welcome_messages": [
                "Find a practical way to help ‚Äì step by step.",
                "Every small step helps. Let's start where you feel ready.",
                "No need to change the world all at once. Just start where you are."
            ],
            "emotional_state_responses": {
                "overwhelmed": ["It's normal to feel overwhelmed. Problems are big, but so is human capacity to help."],
                "frustrated": ["That frustration is energy. It shows you're ready for real change."],
                "hopeful": ["Your hope is contagious and the world needs it right now."],
                "guilty": ["Guilt shows your values are right, but action is more useful than guilt."],
                "motivated": ["That energy is golden! Let's make sure it's directed where it can have the biggest impact."],
                "uncertain": ["Not knowing where to start is the most honest response to complex problems."]
            },
            "action_completion_celebrations": [
                "Excellent! You just did something practical to improve the world.",
                "Well done! This action will have impact in ways you may never know."
            ],
            "progress_encouragement": [
                "Every action you take proves that individuals can create change.",
                "You're not just helping others ‚Äì you're becoming who you want to be."
            ]
        }
    }
    
    try:
        if language == 'czech':
            with open('data/czech/encouragement_czech.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                # Validate that essential keys exist
                if 'welcome_messages' in data and 'emotional_state_responses' in data:
                    return data
                else:
                    # File exists but missing essential data, use fallback
                    return fallback_data['czech']
        else:
            with open('data/international/encouragement_messages.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                if 'welcome_messages' in data:
                    return data
                else:
                    return fallback_data['english']
                    
    except (FileNotFoundError, json.JSONDecodeError, UnicodeDecodeError, PermissionError):
        # Silently use fallback data without showing error messages
        return fallback_data.get(language, fallback_data['czech'])

# Safer function execution wrapper to prevent tokenization issues
def safe_execute_with_fallback(func, *args, **kwargs):
    """Execute function with fallback for tokenization issues"""
    try:
        return func(*args, **kwargs)
    except Exception as e:
        if "TokenError" in str(e) or "unterminated string literal" in str(e):
            st.error(f"üîß Detected tokenization issue (Python 3.13 compatibility). Please refresh the page. Error: {str(e)[:100]}...")
            return None
        else:
            raise e

def get_text(key, language='czech'):
    """Get localized text"""
    texts = {
        'czech': {
            'title': 'üá®üáø Akceler√°tor altruismu',
            'subtitle': 'Praktick√© kroky k pomoci druh√Ωm',
            'welcome': 'V√≠tejte',
            'find_path': 'Naj√≠t cestu',
            'quick_actions': 'Rychl√© akce',
            'my_impact': 'M≈Øj dopad',
            'explore_causes': 'Prozkoumat oblasti',
            'language': 'Jazyk',
            'czech': 'ƒåe≈°tina',
            'english': 'English',
            'actions_taken': 'Proveden√© akce',
            'time_contributed': 'ƒåas p≈ôispƒõn√Ω',
            'money_donated': 'Darov√°no',
            'start_action': 'Zaƒç√≠t',
            'complete_action': 'Dokonƒçit akci',
            'take_assessment': 'Proj√≠t posouzen√≠m',
            'get_quick_help': 'Rychl√° pomoc',
        },
        'english': {
            'title': 'üå± Altruism Accelerator',
            'subtitle': 'Transform overwhelm into meaningful action',
            'welcome': 'Welcome',
            'find_path': 'Find Your Path',
            'quick_actions': 'Quick Actions',
            'my_impact': 'My Impact',
            'explore_causes': 'Explore Causes',
            'language': 'Language',
            'czech': 'ƒåe≈°tina',
            'english': 'English',
            'actions_taken': 'Actions Taken',
            'time_contributed': 'Time Contributed',
            'money_donated': 'Money Donated',
            'start_action': 'Start This',
            'complete_action': 'Complete Action',
            'take_assessment': 'Take Assessment',
            'get_quick_help': 'Get Quick Help',
        }
    }
    return texts.get(language, texts['czech']).get(key, key)

def get_random_encouragement(category="welcome_messages", language='czech'):
    """Get a random encouraging message"""
    encouragement_data = load_encouragement_data(language)
    messages = encouragement_data.get(category, ["You're making a difference!"])
    return random.choice(messages)

def get_seasonal_message(language='czech'):
    """Get seasonal encouragement message"""
    encouragement_data = load_encouragement_data(language)
    current_month = datetime.now().month
    
    if current_month in [3, 4, 5]:  # Spring
        season = 'spring'
    elif current_month in [6, 7, 8]:  # Summer
        season = 'summer'
    elif current_month in [9, 10, 11]:  # Autumn
        season = 'autumn'
    else:  # Winter
        season = 'winter'
    
    seasonal_messages = encouragement_data.get("czech_seasonal_messages", {}).get(season, [])
    if seasonal_messages:
        return random.choice(seasonal_messages)
    return None

# Advanced matching algorithm - Phase 3 enhancement
def calculate_advanced_action_score(user_profile: Dict, action: Dict) -> float:
    """Advanced multi-factor scoring system"""
    score = 0
    
    # Values alignment (0-40 points)
    values_score = calculate_cause_match(
        user_profile.get('values', []), 
        action.get('cause_values', [])
    ) * 40
    score += values_score
    
    # Resource compatibility (0-30 points)
    time_available = user_profile.get('time_available', '30_minutes_or_less')
    time_limit = {'30 minutes or less': 30, '1-2 hours': 120, '3-5 hours': 300, '10+ hours': 600}
    action_time = action.get('requirements', {}).get('time_minutes', 0)
    
    if action_time <= time_limit.get(time_available, 30):
        score += 20
    
    budget = user_profile.get('financial_capacity', '0')
    budget_limit = {'Nothing right now': 0, 'Up to $10': 10, 'Up to $50': 50, '$100+': 500}
    action_cost = action.get('requirements', {}).get('cost_usd', 0)
    
    if action_cost <= budget_limit.get(budget, 0):
        score += 10
    
    # Emotional state adaptation (0-20 points)
    emotional_state = user_profile.get('emotional_state', 'uncertain')
    action_complexity = action.get('user_experience', {}).get('complexity', 'medium')
    
    if emotional_state in ['overwhelmed', 'uncertain'] and action_complexity == 'low':
        score += 20
    elif emotional_state in ['motivated', 'frustrated'] and action_complexity in ['medium', 'high']:
        score += 15
    else:
        score += 10
    
    # Skill matching (0-10 points)
    user_skills = set(user_profile.get('skills', []))
    action_skills = set(action.get('requirements', {}).get('skills', []))
    skill_overlap = len(user_skills & action_skills)
    score += min(skill_overlap * 3, 10)
    
    return score

def calculate_cause_match(user_values: List[str], cause_values: List[str]) -> float:
    """Calculate how well a cause matches user values"""
    if not user_values or not cause_values:
        return 0.3
    
    # Map Czech values to cause values
    value_mapping = {
        'üåç Protecting the environment': 'environment',
        'üìö Advancing education': 'education', 
        '‚öñÔ∏è Promoting justice and equality': 'justice',
        '‚ù§Ô∏è Reducing suffering': 'reducing_suffering',
        'ü§ù Building community connections': 'community',
        'üíº Creating economic opportunities': 'opportunities',
        'üî¨ Supporting scientific progress': 'science',
        'üé® Preserving culture and arts': 'culture'
    }
    
    user_vals_normalized = []
    for val in user_values:
        mapped_val = value_mapping.get(val)
        if mapped_val:
            user_vals_normalized.append(mapped_val)
    
    if not user_vals_normalized:
        return 0.3
    
    overlap = len(set(user_vals_normalized) & set(cause_values))
    return min(overlap / len(user_vals_normalized), 1.0)

def update_streak():
    """Update action streak - Phase 3 feature"""
    today = datetime.now().date()
    last_date = st.session_state.last_action_date
    
    if last_date is None:
        st.session_state.streak_count = 1
    elif last_date == today:
        # Same day, don't increment
        return
    elif last_date == today - timedelta(days=1):
        # Consecutive day
        st.session_state.streak_count += 1
    else:
        # Streak broken
        st.session_state.streak_count = 1
    
    st.session_state.last_action_date = today

def get_matching_actions(cause_id: str, user_profile: Dict, language='czech') -> List[Dict]:
    """Get actions that match user profile from the cause"""
    actions_data = load_actions_data(language)
    matching_actions = []
    
    for action_id, action in actions_data.items():
        if action.get('cause_id') == cause_id:
            score = calculate_advanced_action_score(user_profile, action)
            matching_actions.append((action, score))
    
    # Sort by score and return top actions
    matching_actions.sort(key=lambda x: x[1], reverse=True)
    return [action for action, score in matching_actions]

def celebrate_action_completion(action_title: str, cause_type: str = "", language='czech'):
    """Enhanced celebration with cultural adaptation"""
    encouragement_data = load_encouragement_data(language)
    celebrations = encouragement_data.get("action_completion_celebrations", [])
    
    if celebrations:
        message = random.choice(celebrations)
        message = message.replace("{action}", action_title).replace("{cause}", cause_type)
    else:
        if language == 'czech':
            message = f"V√Ωbornƒõ! Dokonƒçil/a jsi '{action_title}'!"
        else:
            message = f"Amazing work completing '{action_title}'!"
    
    # Czech style: quieter celebration
    if language == 'czech':
        st.markdown(f'<div class="quiet-celebration">{message}</div>', unsafe_allow_html=True)
        # No balloons for Czech - more understated
    else:
        st.markdown(f'<div class="celebration">{message}</div>', unsafe_allow_html=True)
        st.balloons()
    
    # Update streak
    update_streak()
    
    # Show streak achievement
    if st.session_state.streak_count > 1:
        if language == 'czech':
            streak_msg = f"üî• {st.session_state.streak_count} akc√≠ v ≈ôadƒõ!"
        else:
            streak_msg = f"üî• {st.session_state.streak_count} day streak!"
        st.markdown(f'<span class="streak-indicator">{streak_msg}</span>', unsafe_allow_html=True)

def main():
    """Main application with enhanced UX/UI - simplified and stable"""
    # Enhanced Language selector with better styling
    col1, col2, col3 = st.columns([7, 1.5, 1.5])
    with col2:
        if st.button("üá®üáø ƒåe≈°tina", help="P≈ôepnout na ƒçe≈°tinu", key="lang_cz"):
            st.session_state.language = 'czech'
            st.rerun()
    with col3:
        if st.button("üá∫üá∏ English", help="Switch to English", key="lang_en"):
            st.session_state.language = 'english'
            st.rerun()
    
    language = st.session_state.language
    
    # Add a subtle divider
    st.markdown("---")
    
    # Enhanced Sidebar with simplified styling
    with st.sidebar:
        # Simplified title
        st.markdown(f"## {get_text('title', language)}")
        st.markdown(f"*{get_text('subtitle', language)}*")
        
        # Enhanced user stats - simplified
        if st.session_state.total_impact['actions'] > 0:
            st.markdown(f"### üìä {get_text('my_impact', language)}")
            
            # Progress metrics in a container
            col1, col2 = st.columns(2)
            with col1:
                st.metric(
                    label=get_text('actions_taken', language), 
                    value=st.session_state.total_impact['actions']
                )
            with col2:
                total_time = st.session_state.total_impact['time']
                time_label = "ƒåasu vƒõnov√°no" if language == 'czech' else "Time spent"
                st.metric(
                    label=time_label, 
                    value=f"{total_time} min"
                )
            
            # Enhanced streak display - simplified
            if st.session_state.streak_count > 1:
                streak_text = f"üî• **{st.session_state.streak_count} akc√≠ v ≈ôadƒõ!**" if language == 'czech' else f"üî• **{st.session_state.streak_count} day streak!**"
                st.success(streak_text)
            
            st.markdown("---")
    
        # Enhanced contextual encouragement - simplified
        if random.random() < 0.4:  # Slightly more frequent encouragement
            if st.session_state.total_impact['actions'] == 0:
                encouragement = get_random_encouragement("welcome_messages", language)
                st.info(f"üíö {encouragement}")
            elif st.session_state.total_impact['actions'] < 3:
                encouragement = get_random_encouragement("progress_encouragement", language)
                st.success(f"üåü {encouragement}")
            else:
                encouragement = get_random_encouragement("progress_encouragement", language)
                st.success(f"üéâ {encouragement}")
        
        # Enhanced seasonal message - simplified
        seasonal_msg = get_seasonal_message(language)
        if seasonal_msg and random.random() < 0.3:
            st.info(f"üåø {seasonal_msg}")
        
        st.markdown("---")
        
        # Enhanced Navigation - simplified
        st.markdown("### üß≠ Navigace" if language == 'czech' else "### üß≠ Navigation")
        
        # Navigation with enhanced styling
        pages = {
            f"üè† {get_text('welcome', language)}": show_welcome_page,
            f"üß≠ {get_text('find_path', language)}": show_assessment_page,
            f"‚ö° {get_text('quick_actions', language)}": show_quick_actions_page,
            f"üìä {get_text('my_impact', language)}": show_impact_page,
            f"üåç {get_text('explore_causes', language)}": show_causes_page
        }
        
        selected_page = st.radio(
            "Vyberte str√°nku:" if language == 'czech' else "Select page:",
            list(pages.keys()),
            label_visibility="collapsed"
        )
    
    # Show selected page
    pages[selected_page]()

def show_welcome_page():
    """Enhanced welcome page with fixed UX and cultural adaptation"""
    language = st.session_state.language
    
    # POC Disclaimer Badge (non-intrusive)
    st.markdown(f"""
    <div class="poc-badge">
        {'üöß Proof of Concept' if language == 'english' else 'üöß Proof of Concept'}
    </div>
    """, unsafe_allow_html=True)
    
    # Main content container
    st.markdown('<div class="content-container">', unsafe_allow_html=True)
    
    st.markdown(f'<h1 class="main-header">{get_text("title", language)}</h1>', unsafe_allow_html=True)
    
    welcome_msg = get_random_encouragement("welcome_messages", language)
    st.markdown(f'<p class="sub-header">{welcome_msg}</p>', unsafe_allow_html=True)
    
    # Add a welcoming introduction
    if language == 'czech':
        intro_text = """
        üåü **V√≠tejte v prostoru, kde se empatie mƒõn√≠ v konkr√©tn√≠ ƒçiny.**
        
        Tento n√°stroj v√°m pom≈Ø≈æe naj√≠t smyslupln√© zp≈Øsoby, jak pomoci druh√Ωm ‚Äì 
        a≈• u≈æ m√°te 5 minut nebo cel√Ω den, ≈æijete v Praze nebo obklopeni p≈ô√≠rodou.
        
        üí° **Jak to funguje:** Projdete si kr√°tk√© posouzen√≠, kter√© najde akce p≈ôesnƒõ pro va≈°e mo≈ænosti a hodnoty.
        """
    else:
        intro_text = """
        üåü **Welcome to a space where empathy transforms into concrete action.**
        
        This tool helps you find meaningful ways to help others ‚Äì 
        whether you have 5 minutes or a whole day, live in Prague or the countryside.
        
        üí° **How it works:** Take a brief assessment that finds actions perfectly matched to your resources and values.
        """
    st.markdown(intro_text)
    
    # Quote comes AFTER intro, properly positioned
    seasonal_msg = get_seasonal_message(language)
    if seasonal_msg:
        st.markdown(f"""
        <div class="quote-box">
            <span style="font-size: 1.2em;">üåø</span> {seasonal_msg}
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Enhanced emotional assessment section - simplified and responsive
    if language == 'czech':
        st.markdown("### üí≠ Jak se pr√°vƒõ c√≠t√≠≈°?")
        st.markdown("*Pom≈Ø≈æe n√°m naj√≠t spr√°vn√Ω p≈ô√≠stup pro v√°s*")
        emotional_options = [
            "üòî Zahlcen/a v≈°emi probl√©my",
            "üò§ Frustrov√°n/a a chci jednat", 
            "üòä Nadƒõjn√Ω/√° a p≈ôipraven/a pomoci",
            "üòï Provinile kv≈Øli nedƒõl√°n√≠ dost",
            "üî• Motivov√°n/a nƒõco zmƒõnit",
            "üòê Nejist√Ω/√°, kde zaƒç√≠t"
        ]
    else:
        st.markdown("### üí≠ How are you feeling right now?")
        st.markdown("*This helps us find the right approach for you*")
        emotional_options = [
            "üòî Overwhelmed by all the problems",
            "üò§ Frustrated and want to act", 
            "üòä Hopeful and ready to help",
            "üòï Guilty about not doing enough",
            "üî• Motivated to make a difference",
            "üòê Uncertain where to start"
        ]
    
    # Enhanced emotional state selector - simplified
    emotional_state = st.radio(
        "Vyberte mo≈ænost:" if language == 'czech' else "Choose option:",
        emotional_options,
        key="emotional_state",
        label_visibility="collapsed"
    )
    
    # Enhanced contextual response - more robust
    if emotional_state:
        # Extract emotion key more safely and map to English keys used in JSON
        emotion_parts = emotional_state.split()
        if len(emotion_parts) > 1:
            emotion_key = emotion_parts[1].lower().rstrip('/a').rstrip('√Ω').rstrip('√°')
            # Map Czech emotions to English response keys (as used in JSON)
            emotion_mapping = {
                'zahlcen': 'overwhelmed',
                'frustrov√°n': 'frustrated', 
                'nadƒõjn√Ω': 'hopeful',
                'provinile': 'guilty',
                'motivov√°n': 'motivated',
                'nejist√Ω': 'uncertain',
                'overwhelmed': 'overwhelmed',
                'frustrated': 'frustrated',
                'hopeful': 'hopeful', 
                'guilty': 'guilty',
                'motivated': 'motivated',
                'uncertain': 'uncertain'
            }
            
            mapped_emotion = emotion_mapping.get(emotion_key, 'uncertain')
            st.session_state.user_profile['emotional_state'] = mapped_emotion
            
            # Get appropriate response
            encouragement_data = load_encouragement_data(language)
            responses = encouragement_data.get("emotional_state_responses", {}).get(mapped_emotion, [])
            
            if responses:
                response = random.choice(responses)
                st.success(f"‚ú® {response}")
            else:
                # Fallback encouraging response
                if language == 'czech':
                    fallback_response = "Rozum√≠me va≈°im pocit≈Øm. Najdeme spoleƒçnƒõ zp≈Øsob, jak m≈Ø≈æete pomoci."
                else:
                    fallback_response = "We understand how you feel. Let's find a way you can help together."
                st.info(f"üíö {fallback_response}")
    
    st.markdown("---")
    
    # Enhanced CTA section with better visual hierarchy - simplified
    st.markdown(f"""
    <div class="cta-section">
        <h3 style="margin-bottom: 1rem; color: #2E5D31;">
            {'üöÄ Jak chcete zaƒç√≠t?' if language == 'czech' else 'üöÄ How would you like to start?'}
        </h3>
        <p style="color: #5A6B5A; margin-bottom: 1.5rem;">
            {'Vyberte si cestu, kter√° v√°m vyhovuje:' if language == 'czech' else 'Choose the path that suits you:'}
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Better CTA layout with proper spacing - responsive
    col_a, col_b = st.columns(2)
    with col_a:
        if st.button(
            f"üß≠ {get_text('take_assessment', language)}", 
            type="primary", 
            use_container_width=True,
            help="Z√≠skejte personalizovan√° doporuƒçen√≠ na m√≠ru" if language == 'czech' else "Get personalized recommendations tailored to you"
        ):
            st.session_state.assessment_step = 1
            st.rerun()
    
    with col_b:
        if st.button(
            f"‚ö° {get_text('get_quick_help', language)}", 
            use_container_width=True,
            help="Najdƒõte rychl√© akce, kter√© m≈Ø≈æete udƒõlat hned teƒè" if language == 'czech' else "Find quick actions you can do right now"
        ):
            # Navigate to quick actions page
            st.session_state.quick_action_requested = True
            st.rerun()
    
    # Enhanced "Where can I help today?" expandable section - improved layout
    with st.expander(
        "üåç Zobrazit p≈ô√≠le≈æitosti v m√©m okol√≠" if language == 'czech' else "üåç Show opportunities near me",
        expanded=False
    ):
        if language == 'czech':
            st.markdown("""
            **üè† Praha**
            - **Organizace pro zv√≠≈ôata**: [Vo≈ô√≠≈°kovi≈°tƒõ](https://voriskoviste.cz) - dobrovolnictv√≠ s opu≈°tƒõn√Ωmi psy
            - **Pomoc bezdomovc≈Øm**: [Nadƒõje](https://www.nadeje.cz) - rozd√°v√°n√≠ j√≠dla, soci√°ln√≠ pr√°ce
            - **Podpora vzdƒõl√°n√≠**: [Uƒç√≠me online](https://www.ucimeonline.cz) - douƒçov√°n√≠ dƒõt√≠ online
            
            **üè¢ Brno**
            - **Senio≈ôi**: [≈Ωivot 90](https://zivot90.cz) - n√°v≈°tƒõvy, doprov√°zen√≠ k l√©ka≈ôi
            - **Ekologie**: [Lipka](https://lipka.cz) - √∫klidy park≈Ø, v√Ωsadba rostlin
            - **Dƒõti v nouzi**: [SOS dƒõtsk√© vesniƒçky](https://www.sos-vesniƒçky.cz)
            
            **üåê Online z domova**
            - **Krizov√° pomoc**: [Linka d≈Øvƒõry](https://www.ceska-sprava.cz) - ≈°kolen√≠ dobrovoln√≠k≈Ø
            - **P≈ôekl√°d√°n√≠**: [Translators without Borders](https://translatorswithoutborders.org)
            - **Vzdƒõl√°n√≠**: [Khan Academy ƒçesky](https://cs.khanacademy.org) - tvorba obsahu
            
            *üìù Pozn√°mka: Toto jsou skuteƒçn√© organizace. P≈ôed zapojen√≠m si ovƒõ≈ôte aktu√°ln√≠ mo≈ænosti.*
            """)
        else:
            st.markdown("""
            **üè† Prague**
            - **Animal welfare**: [Vo≈ô√≠≈°kovi≈°tƒõ](https://voriskoviste.cz) - volunteering with abandoned dogs
            - **Homeless support**: [Nadƒõje](https://www.nadeje.cz) - food distribution, social work
            - **Education support**: [Uƒç√≠me online](https://www.ucimeonline.cz) - online tutoring for children
            
            **üè¢ Brno**
            - **Senior care**: [≈Ωivot 90](https://zivot90.cz) - visits, medical accompaniment
            - **Environmental**: [Lipka](https://lipka.cz) - park cleanups, tree planting
            - **Children in need**: [SOS Children's Villages](https://www.sos-vesniƒçky.cz)
            
            **üåê Online from home**
            - **Crisis support**: [Helpline](https://www.ceska-sprava.cz) - volunteer training
            - **Translation**: [Translators without Borders](https://translatorswithoutborders.org)
            - **Education**: [Khan Academy Czech](https://cs.khanacademy.org) - content creation
            
            *üìù Note: These are real organizations. Please verify current opportunities before getting involved.*
            """)
    
    # Close content container
    st.markdown('</div>', unsafe_allow_html=True)

def show_assessment_page():
    """Enhanced assessment with Czech cultural adaptation"""
    language = st.session_state.language
    
    if language == 'czech':
        st.markdown('<h1 class="main-header">üß≠ Najdi svou cestu k dopadu</h1>', unsafe_allow_html=True)
        steps = ["Hodnoty", "Zdroje", "Doporuƒçen√≠"]
    else:
        st.markdown('<h1 class="main-header">üß≠ Find Your Path to Impact</h1>', unsafe_allow_html=True)
        steps = ["Values", "Resources", "Recommendations"]
    
    current_step = st.session_state.get('assessment_step', 0)
    
    if current_step > 0:
        progress = (current_step - 1) / (len(steps) - 1) if len(steps) > 1 else 1.0
        st.progress(progress)
        
        encouragement = get_random_encouragement("assessment_encouragement", language)
        st.info(encouragement)
        
        st.markdown(f'<p class="progress-text">Krok {current_step} z {len(steps)}: {steps[current_step-1]}</p>', unsafe_allow_html=True)
    
    if current_step == 0:
        if language == 'czech':
            st.info("üëà Zaƒçni posouzen√≠ na √∫vodn√≠ str√°nce!")
        else:
            st.info("üëà Start your assessment from the Welcome page!")
        return
    elif current_step == 1:
        show_values_step()
    elif current_step == 2:
        show_resources_step()
    elif current_step == 3:
        show_recommendations_step()

def show_values_step():
    """Values assessment with Czech adaptation"""
    language = st.session_state.language
    
    if language == 'czech':
        st.markdown("### Co je pro tebe nejd≈Øle≈æitƒõj≈°√≠?")
        st.markdown("Vyber sv√© 3 hlavn√≠ hodnoty, kter√© tƒõ motivuj√≠ k pomoci:")
        
        values_options = [
            "üåç Ochrana ≈æivotn√≠ho prost≈ôed√≠",
            "üìö Podpora vzdƒõl√°n√≠", 
            "‚öñÔ∏è Prosazov√°n√≠ spravedlnosti a rovnosti",
            "‚ù§Ô∏è Sni≈æov√°n√≠ utrpen√≠",
            "ü§ù Budov√°n√≠ komunitn√≠ch vztah≈Ø",
            "üíº Vytv√°≈ôen√≠ ekonomick√Ωch p≈ô√≠le≈æitost√≠",
            "üî¨ Podpora vƒõdeck√©ho pokroku",
            "üé® Zachov√°n√≠ kultury a umƒõn√≠"
        ]
        help_text = "Tvoje hodnoty n√°m pom≈Ø≈æou naj√≠t oblasti, kter√© budou pro tebe smyslupln√©."
    else:
        st.markdown("### What matters most to you?")
        st.markdown("Select your top 3 values that drive your desire to help:")
        
        values_options = [
            "üåç Protecting the environment",
            "üìö Advancing education", 
            "‚öñÔ∏è Promoting justice and equality",
            "‚ù§Ô∏è Reducing suffering",
            "ü§ù Building community connections",
            "üíº Creating economic opportunities",
            "üî¨ Supporting scientific progress",
            "üé® Preserving culture and arts"
        ]
        help_text = "Your values help us find causes that will feel meaningful to you."
    
    selected_values = st.multiselect(
        "Vyber a≈æ 3 hodnoty:" if language == 'czech' else "Choose up to 3 values:",
        values_options,
        key="user_values",
        max_selections=3,
        help=help_text
    )
    
    if len(selected_values) > 0:
        if language == 'czech':
            values_text = ', '.join([v.split(' ', 1)[1] for v in selected_values])
            st.success(f"‚ú® Vybral/a jsi: {values_text}")
        else:
            values_text = ', '.join([v.split(' ', 1)[1] for v in selected_values])
            st.success(f"‚ú® You selected: {values_text}")
        
        st.session_state.user_profile['values'] = selected_values
        
        next_text = "Dal≈°√≠: Zdroje" if language == 'czech' else "Next: Resources"
        if st.button(next_text, type="primary"):
            st.session_state.assessment_step = 2
            st.rerun()
    else:
        info_text = "üí≠ Pros√≠m vyber alespo≈à jednu hodnotu pro pokraƒçov√°n√≠." if language == 'czech' else "üí≠ Please select at least one value to continue."
        st.info(info_text)

def show_resources_step():
    """Resources assessment with Czech adaptation"""
    language = st.session_state.language
    
    if language == 'czech':
        st.markdown("### Co m≈Ø≈æe≈° p≈ôispƒõt?")
    else:
        st.markdown("### What can you contribute?")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if language == 'czech':
            st.markdown("**‚è∞ ƒåas k dispozici t√Ωdnƒõ:**")
            time_options = ["30 minut nebo m√©nƒõ", "1-2 hodiny", "3-5 hodin", "10+ hodin"]
            help_text = "Buƒè up≈ô√≠mn√Ω/√° ohlednƒõ toho, co je pro tebe udr≈æiteln√©"
        else:
            st.markdown("**‚è∞ Time Available per Week:**")
            time_options = ["30 minutes or less", "1-2 hours", "3-5 hours", "10+ hours"]
            help_text = "Be honest about what's sustainable for you"
        
        time_available = st.radio(
            "Kolik ƒçasu m≈Ø≈æe≈° obvykle vƒõnovat?" if language == 'czech' else "How much time can you typically contribute?",
            time_options,
            key="time_available",
            help=help_text
        )
        
        if language == 'czech':
            st.markdown("**üéØ Dovednosti a z√°jmy:**")
            skills_options = ["Psan√≠/Komunikace", "Technologie/Programov√°n√≠", "Uƒçen√≠/Mentoring", 
                            "Pl√°nov√°n√≠ akc√≠", "V√Ωzkum/Anal√Ωza", "Tv≈Ørƒç√≠ umƒõn√≠", "Fyzick√° pr√°ce"]
        else:
            st.markdown("**üéØ Skills & Interests:**")
            skills_options = ["Writing/Communication", "Technology/Programming", "Teaching/Mentoring", 
                            "Event Planning", "Research/Analysis", "Creative Arts", "Physical Labor"]
        
        skills = st.multiselect(
            "V ƒçem jsi dobr√Ω/√° nebo co tƒõ zaj√≠m√°?" if language == 'czech' else "What are you good at or interested in?",
            skills_options,
            key="user_skills"
        )
    
    with col2:
        if language == 'czech':
            st.markdown("**üí∞ Finanƒçn√≠ mo≈ænosti:**")
            budget_options = ["Moment√°lnƒõ nic", "Do 250 Kƒç", "Do 1250 Kƒç", "2500+ Kƒç"]
        else:
            st.markdown("**üí∞ Financial Capacity:**")
            budget_options = ["Nothing right now", "Up to $10", "Up to $50", "$100+"]
        
        financial_capacity = st.radio(
            "Kolik m≈Ø≈æe≈° mƒõs√≠ƒçnƒõ p≈ôispƒõt?" if language == 'czech' else "How much can you contribute monthly?",
            budget_options,
            key="financial_capacity"
        )
    
    # Save to profile
    st.session_state.user_profile.update({
        'time_available': time_available,
        'skills': skills,
        'financial_capacity': financial_capacity
    })
    
    col_back, col_next = st.columns(2)
    with col_back:
        back_text = "‚Üê Zpƒõt" if language == 'czech' else "‚Üê Back"
        if st.button(back_text):
            st.session_state.assessment_step = 1
            st.rerun()
    with col_next:
        next_text = "Z√≠skat doporuƒçen√≠! üéØ" if language == 'czech' else "Get My Recommendations! üéØ"
        if st.button(next_text, type="primary"):
            st.session_state.assessment_step = 3
            st.rerun()

def show_recommendations_step():
    """Enhanced recommendations with advanced matching"""
    language = st.session_state.language
    
    if language == 'czech':
        st.markdown('<h1 class="main-header">üéØ Tvoje osobn√≠ cesta k dopadu</h1>', unsafe_allow_html=True)
        st.markdown("### üåü Na z√°kladƒõ tv√Ωch hodnot a zdroj≈Ø:")
    else:
        st.markdown('<h1 class="main-header">üéØ Your Personalized Path to Impact</h1>', unsafe_allow_html=True)
        st.markdown("### üåü Based on your values and resources:")
    
    causes_data = load_causes_data(language)
    user_profile = st.session_state.user_profile
    
    if not causes_data:
        error_text = "Nelze naƒç√≠st data o oblastech. Zkontrolujte datov√© soubory." if language == 'czech' else "Unable to load causes data. Please check your data files."
        st.error(error_text)
        return
    
    # Calculate cause matches with advanced algorithm
    cause_matches = []
    for cause_id, cause_info in causes_data.items():
        match_score = calculate_cause_match(
            user_profile.get('values', []), 
            cause_info.get('values_alignment', [])
        )
        cause_matches.append((cause_id, cause_info, match_score))
    
    # Sort by match score
    cause_matches.sort(key=lambda x: x[2], reverse=True)
    
    # Show top 3 matches
    for i, (cause_id, cause_info, match_score) in enumerate(cause_matches[:3]):
        with st.container():
            match_percentage = int(match_score * 100)
            st.markdown(f"""
            <div class="cause-card">
                <h3>{cause_info.get('emoji', 'üéØ')} {cause_info.get('title', 'Unknown Cause')} 
                    <span style="color: #7AB87A;">({match_percentage}% shoda)</span>
                </h3>
                <p>{cause_info.get('description', 'No description available')}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Get matching actions using advanced algorithm
            matching_actions = get_matching_actions(cause_id, user_profile, language)
            
            if matching_actions:
                perfect_text = "**‚ú® Perfektn√≠ akce pro tebe:**" if language == 'czech' else "**‚ú® Perfect actions for you:**"
                st.markdown(perfect_text)
                
                for action in matching_actions[:2]:  # Show top 2 actions
                    col1, col2, col3 = st.columns([3, 1, 1])
                    
                    with col1:
                        st.markdown(f"""
                        <div class="action-card">
                            <h4>{action.get('title', 'Unknown Action')}</h4>
                            <p>{action.get('description', 'No description')}</p>
                            <p><em>Dopad: {action.get('impact', {}).get('metric_description', 'Positive impact')}</em></p>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col2:
                        requirements = action.get('requirements', {})
                        st.markdown(f"‚è±Ô∏è {requirements.get('time_minutes', 0)} min")
                        if language == 'czech':
                            cost_czk = requirements.get('cost_usd', 0) * 25  # Rough conversion
                            st.markdown(f"üí∞ {cost_czk} Kƒç")
                        else:
                            st.markdown(f"üí∞ ${requirements.get('cost_usd', 0)}")
                    
                    with col3:
                        start_text = get_text('start_action', language)
                        if st.button(f"{start_text}! üöÄ", key=f"action_{action.get('id', i)}"):
                            # Record action completion
                            st.session_state.actions_completed.append({
                                'id': action.get('id'),
                                'title': action.get('title'),
                                'cause': cause_id,
                                'timestamp': datetime.now().isoformat()
                            })
                            
                            # Update impact metrics
                            st.session_state.total_impact['actions'] += 1
                            st.session_state.total_impact['time'] += requirements.get('time_minutes', 0)
                            st.session_state.total_impact['money'] += requirements.get('cost_usd', 0)
                            
                            # Show celebration
                            cause_title = cause_info.get('title', 'this cause')
                            celebrate_action_completion(action.get('title', 'this action'), cause_title, language)
                            
                            # Show action URL
                            org_website = action.get('organization', {}).get('website')
                            if org_website and org_website != '#':
                                complete_text = get_text('complete_action', language)
                                st.markdown(f"üîó [{complete_text}]({org_website})")
                                success_text = "‚ú® Klikni na odkaz v√Ω≈°e pro dokonƒçen√≠ akce!" if language == 'czech' else "‚ú® Click the link above to complete your action!"
                                st.info(success_text)
            else:
                no_actions_text = "Moment√°lnƒõ nem√°me akce, kter√© by odpov√≠daly tv√Ωm omezen√≠m, ale neust√°le p≈ôid√°v√°me dal≈°√≠!" if language == 'czech' else "No actions currently match your constraints, but we're always adding more!"
                st.info(no_actions_text)
            
            st.markdown("---")

def show_quick_actions_page():
    """Enhanced quick actions with immediate real-world connections"""
    language = st.session_state.language
    
    if language == 'czech':
        st.markdown('<h1 class="main-header">‚ö° Rychl√© akce</h1>', unsafe_allow_html=True)
        st.markdown('<p class="sub-header">Nƒõco smyslupln√©ho, co m≈Ø≈æete udƒõlat hned teƒè</p>', unsafe_allow_html=True)
    else:
        st.markdown('<h1 class="main-header">‚ö° Quick Actions</h1>', unsafe_allow_html=True)
        st.markdown('<p class="sub-header">Something meaningful you can do right now</p>', unsafe_allow_html=True)
    
    # Time-based filter
    col1, col2, col3 = st.columns(3)
    with col1:
        if language == 'czech':
            time_filter = st.selectbox(
                "Kolik ƒçasu m√°te?",
                ["5 minut", "15 minut", "30 minut", "1 hodina", "Cokoliv"]
            )
        else:
            time_filter = st.selectbox(
                "How much time do you have?",
                ["5 minutes", "15 minutes", "30 minutes", "1 hour", "Any time"]
            )
    
    with col2:
        if language == 'czech':
            location_filter = st.selectbox(
                "Kde jste?",
                ["Doma", "Venku", "V pr√°ci", "Cestou", "Kdekoli"]
            )
        else:
            location_filter = st.selectbox(
                "Where are you?",
                ["At home", "Outside", "At work", "Traveling", "Anywhere"]
            )
    
    with col3:
        if language == 'czech':
            energy_filter = st.selectbox(
                "√örove≈à energie",
                ["Vysok√°", "St≈ôedn√≠", "N√≠zk√°", "Jak√°koli"]
            )
        else:
            energy_filter = st.selectbox(
                "Energy level",
                ["High", "Medium", "Low", "Any"]
            )
    
    st.markdown("---")
    
    # Enhanced quick actions with real connections
    if language == 'czech':
        quick_actions = [
            {
                "title": "üå± Daruj na v√Ωsadbu strom≈Ø",
                "description": "Jednor√°zov√Ω dar na v√Ωsadbu stromu v ƒåesk√© republice",
                "time": "2 minuty",
                "location": "Online",
                "energy": "N√≠zk√°",
                "impact": "1 strom = 22 kg CO2 roƒçnƒõ",
                "action_link": "https://www.sazka.cz/stromy",
                "instructions": "Kliknƒõte na odkaz, vyberte ƒç√°stku a dokonƒçete dar. Dostanete potvrzen√≠ o v√Ωsadbƒõ.",
                "category": "P≈ô√≠roda"
            },
            {
                "title": "üìö Daruj pou≈æit√© knihy",
                "description": "Najdƒõte nejbli≈æ≈°√≠ knihobudku nebo charitu pro dar knih",
                "time": "15 minut",
                "location": "Venku",
                "energy": "St≈ôedn√≠",
                "impact": "Pom≈Ø≈æe 3-5 dƒõtem k nov√Ωm knih√°m",
                "action_link": "https://www.knihobudky.cz/mapa",
                "instructions": "Najdƒõte knihobudku na mapƒõ, zabalte knihy a odneste je. Vyfotit se m≈Ø≈æete pro vlastn√≠ radost!",
                "category": "Vzdƒõl√°n√≠"
            },
            {
                "title": "‚ù§Ô∏è Napi≈°te povzbudiv√© dopisy senior≈Øm",
                "description": "Online platforma pro pos√≠l√°n√≠ dopis≈Ø osamƒõl√Ωm senior≈Øm",
                "time": "20 minut",
                "location": "Doma",
                "energy": "St≈ôedn√≠",
                "impact": "Rozvesel√≠ jednoho seniora na t√Ωden",
                "action_link": "https://www.dopisy-seniorum.cz",
                "instructions": "Zaregistrujte se, napi≈°te osobn√≠ dopis (bez osobn√≠ch √∫daj≈Ø) a ode≈°lete syst√©mem.",
                "category": "Komunita"
            },
            {
                "title": "ü•ò Objednejte j√≠dlo pro bezdomovce",
                "description": "Zaplatit tepl√© j√≠dlo pro osobu bez domova p≈ôes aplikaci",
                "time": "5 minut",
                "location": "Kdekoli",
                "energy": "N√≠zk√°",
                "impact": "Zajist√≠ tepl√© j√≠dlo na jeden den",
                "action_link": "https://www.nadeje.cz/daruj-jidlo",
                "instructions": "Otev≈ôete aplikaci Nadƒõje, vyberte 'Daruj j√≠dlo' a zapla≈•te. J√≠dlo bude vyd√°no v nejbli≈æ≈°√≠m centru.",
                "category": "Z√°kladn√≠ pot≈ôeby"
            },
            {
                "title": "üéì Douƒçujte d√≠tƒõ online",
                "description": "15minutov√© douƒçov√°n√≠ matematiky nebo ƒçe≈°tiny p≈ôes video",
                "time": "30 minut",
                "location": "Doma",
                "energy": "Vysok√°",
                "impact": "Pom≈Ø≈æe jednomu d√≠tƒõti pochopit l√°tku",
                "action_link": "https://www.ucimeonline.cz/dobrovolnik",
                "instructions": "Zaregistrujte se jako dobrovoln√≠k, projdƒõte si rychl√Ω tr√©nink a p≈ôipojte se k voln√© hodinƒõ.",
                "category": "Vzdƒõl√°n√≠"
            },
            {
                "title": "üêï Pomozte √∫tulku na d√°lku",
                "description": "Darujte granule nebo hraƒçky pro psy online",
                "time": "10 minut",
                "location": "Online",
                "energy": "N√≠zk√°",
                "impact": "Pom≈Ø≈æe 5-10 ps≈Øm na t√Ωden",
                "action_link": "https://www.utulekpraha.cz/pomoc",
                "instructions": "Vyberte si vƒõci ze seznamu pot≈ôeb √∫tulku a objednejte p≈ô√≠mo na jejich adresu.",
                "category": "Zv√≠≈ôata"
            }
        ]
    else:
        quick_actions = [
            {
                "title": "üå± Donate for tree planting",
                "description": "One-time donation for tree planting in Czech Republic",
                "time": "2 minutes",
                "location": "Online",
                "energy": "Low",
                "impact": "1 tree = 22 kg CO2 annually",
                "action_link": "https://www.sazka.cz/stromy",
                "instructions": "Click the link, choose amount and complete donation. You'll get planting confirmation.",
                "category": "Environment"
            },
            {
                "title": "üìö Donate used books",
                "description": "Find nearest book exchange box or charity for book donation",
                "time": "15 minutes",
                "location": "Outside",
                "energy": "Medium",
                "impact": "Helps 3-5 children access new books",
                "action_link": "https://www.knihobudky.cz/mapa",
                "instructions": "Find book box on map, pack books and deliver them. Photo optional for your own joy!",
                "category": "Education"
            },
            {
                "title": "‚ù§Ô∏è Write encouraging letters to seniors",
                "description": "Online platform for sending letters to lonely seniors",
                "time": "20 minutes",
                "location": "At home",
                "energy": "Medium",
                "impact": "Brightens one senior's week",
                "action_link": "https://www.dopisy-seniorum.cz",
                "instructions": "Register, write personal letter (no personal data) and send through system.",
                "category": "Community"
            },
            {
                "title": "ü•ò Order food for homeless person",
                "description": "Pay for warm meal for homeless person through app",
                "time": "5 minutes",
                "location": "Anywhere",
                "energy": "Low",
                "impact": "Provides warm meal for one day",
                "action_link": "https://www.nadeje.cz/daruj-jidlo",
                "instructions": "Open Nadƒõje app, select 'Donate food' and pay. Food will be distributed at nearest center.",
                "category": "Basic needs"
            },
            {
                "title": "üéì Tutor child online",
                "description": "15-minute math or language tutoring via video",
                "time": "30 minutes",
                "location": "At home",
                "energy": "High",
                "impact": "Helps one child understand material",
                "action_link": "https://www.ucimeonline.cz/dobrovolnik",
                "instructions": "Register as volunteer, complete quick training and join available session.",
                "category": "Education"
            },
            {
                "title": "üêï Help animal shelter remotely",
                "description": "Donate food or toys for dogs online",
                "time": "10 minutes",
                "location": "Online",
                "energy": "Low",
                "impact": "Helps 5-10 dogs per week",
                "action_link": "https://www.utulekpraha.cz/pomoc",
                "instructions": "Choose items from shelter's wish list and order directly to their address.",
                "category": "Animals"
            }
        ]
    
    # Filter actions based on user selection
    filtered_actions = quick_actions.copy()
    
    # Apply filters (simplified for demo)
    if time_filter not in ["Cokoliv", "Any time"]:
        # In real implementation, you'd filter based on actual time requirements
        pass
    
    # Display actions in enhanced grid layout
    st.markdown('<div class="action-grid">', unsafe_allow_html=True)
    
    cols = st.columns(2)
    for i, action in enumerate(filtered_actions):
        with cols[i % 2]:
            st.markdown(f"""
            <div class="action-card">
                <h4>{action['title']}</h4>
                <p style="margin: 0.5rem 0;">{action['description']}</p>
                <div style="margin: 1rem 0;">
                    <span style="background: #E8F5E8; padding: 0.2rem 0.5rem; border-radius: 12px; font-size: 0.8rem; margin-right: 0.5rem;">‚è±Ô∏è {action['time']}</span>
                    <span style="background: #E8F5E8; padding: 0.2rem 0.5rem; border-radius: 12px; font-size: 0.8rem; margin-right: 0.5rem;">üìç {action['location']}</span>
                    <span style="background: #E8F5E8; padding: 0.2rem 0.5rem; border-radius: 12px; font-size: 0.8rem;">‚ö° {action['energy']}</span>
                </div>
                <div style="background: #F0F8F0; padding: 0.75rem; border-radius: 8px; margin: 1rem 0;">
                    <strong>Dopad:</strong> {action['impact']}
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            col_start, col_details = st.columns([1, 1])
            with col_start:
                if st.button(
                    f"Zaƒç√≠t nyn√≠" if language == 'czech' else "Start now",
                    key=f"start_{i}",
                    type="primary",
                    use_container_width=True
                ):
                    st.info(f"üîó P≈ôesmƒõrov√°n√≠ na: {action['action_link']}")
                    st.markdown(f"**Instrukce:** {action['instructions']}")
                    
                    # Track completion
                    if 'quick_actions_completed' not in st.session_state:
                        st.session_state.quick_actions_completed = []
                    st.session_state.quick_actions_completed.append(action['title'])
                    
                    # Celebrate action start
                    celebrate_action_completion(action['title'], action['category'], language)
            
            with col_details:
                if st.button(
                    f"Podrobnosti" if language == 'czech' else "Details",
                    key=f"details_{i}",
                    use_container_width=True
                ):
                    with st.expander(f"Detaily akce: {action['title']}", expanded=True):
                        st.markdown(f"""
                        **Kategorie:** {action['category']}
                        
                        **Instrukce:**
                        {action['instructions']}
                        
                        **Odkaz:** [{action['action_link']}]({action['action_link']})
                        
                        **Proƒç to m√° smysl:**
                        Tato akce je navr≈æena tak, aby byla rychl√°, ale smyslupln√°. Ka≈æd√° podobn√° akce p≈ôisp√≠v√° k vƒõt≈°√≠ pozitivn√≠ zmƒõnƒõ.
                        """)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Emergency help widget
    st.markdown(f"""
    <div class="emergency-help">
        <strong>{'Pot≈ôebujete okam≈æitou pomoc?' if language == 'czech' else 'Need immediate help?'}</strong><br>
        üìû {'Linka bezpeƒç√≠: 116 111' if language == 'czech' else 'Safety line: 116 111'}<br>
        üÜò {'Krizov√° intervence: 284 016 666' if language == 'czech' else 'Crisis intervention: 284 016 666'}
    </div>
    """, unsafe_allow_html=True)
    
    # Add summary of completed quick actions
    if hasattr(st.session_state, 'quick_actions_completed') and st.session_state.quick_actions_completed:
        st.markdown("---")
        st.markdown("### üéâ Dokonƒçen√© rychl√© akce" if language == 'czech' else "### üéâ Completed Quick Actions")
        for action in st.session_state.quick_actions_completed:
            st.success(f"‚úÖ {action}")
    
    # CTA for full assessment
    st.markdown("---")
    st.markdown(f"""
    <div class="cta-section">
        <h3>{'üí° Chcete personalizovan√° doporuƒçen√≠?' if language == 'czech' else 'üí° Want personalized recommendations?'}</h3>
        <p>{'Projdƒõte si na≈°e posouzen√≠ pro akce p≈ôesnƒõ na m√≠ru va≈°im hodnot√°m a mo≈ænostem.' if language == 'czech' else 'Take our assessment for actions perfectly matched to your values and resources.'}</p>
    </div>
    """, unsafe_allow_html=True)
    
    if st.button(
        f"üß≠ Proj√≠t personalizovan√© posouzen√≠" if language == 'czech' else "üß≠ Take personalized assessment",
        type="primary",
        use_container_width=True
    ):
        st.session_state.assessment_step = 1
        st.rerun()

def show_impact_page():
    """Enhanced impact tracking with visualizations and motivation"""
    language = st.session_state.language
    
    if language == 'czech':
        st.markdown('<h1 class="main-header">üìä V√°≈° dopad na svƒõt</h1>', unsafe_allow_html=True)
        st.markdown('<p class="sub-header">Ka≈æd√° akce m√° v√Ωznam. Pod√≠vejte se na sv≈Øj pokrok!</p>', unsafe_allow_html=True)
    else:
        st.markdown('<h1 class="main-header">üìä Your Impact on the World</h1>', unsafe_allow_html=True)
        st.markdown('<p class="sub-header">Every action matters. See your progress!</p>', unsafe_allow_html=True)
    
    # Check for milestones and celebrate
    actions_count = st.session_state.total_impact['actions']
    time_contributed = st.session_state.total_impact['time']
    money_donated = st.session_state.total_impact['money']
    
    # Milestone detection and celebration
    milestones_achieved = []
    if actions_count == 1:
        milestones_achieved.append("first_action")
    elif actions_count == 5:
        milestones_achieved.append("five_actions")
    
    if time_contributed >= 600:  # 10 hours
        milestones_achieved.append("ten_hours")
    
    if money_donated > 0:
        milestones_achieved.append("first_donation")
    
    # Show milestone celebrations
    for milestone in milestones_achieved:
        encouragement_data = load_encouragement_data(language)
        milestone_msg = encouragement_data.get("milestone_messages", {}).get(milestone, "")
        if milestone_msg:
            st.balloons()
            st.success(f"üéâ **Milestone dosa≈æen!** {milestone_msg}")
    
    # Enhanced impact visualization
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div class="impact-metric">
            <h2 style="color: #7AB87A; margin: 0;">{actions_count}</h2>
            <p style="margin: 0.5rem 0 0 0; font-weight: 600;">
                {'Dokonƒçen√Ωch akc√≠' if language == 'czech' else 'Actions Completed'}
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        hours = time_contributed / 60
        st.markdown(f"""
        <div class="impact-metric">
            <h2 style="color: #7AB87A; margin: 0;">{hours:.1f}h</h2>
            <p style="margin: 0.5rem 0 0 0; font-weight: 600;">
                {'ƒåasu vƒõnov√°no' if language == 'czech' else 'Time Contributed'}
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        if language == 'czech':
            money_czk = money_donated * 25  # Rough USD to CZK conversion
            st.markdown(f"""
            <div class="impact-metric">
                <h2 style="color: #7AB87A; margin: 0;">{money_czk:.0f} Kƒç</h2>
                <p style="margin: 0.5rem 0 0 0; font-weight: 600;">Darov√°no</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="impact-metric">
                <h2 style="color: #7AB87A; margin: 0;">${money_donated:.0f}</h2>
                <p style="margin: 0.5rem 0 0 0; font-weight: 600;">Donated</p>
            </div>
            """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Progress towards next milestones
    if language == 'czech':
        st.markdown("### üéØ Dal≈°√≠ miln√≠ky")
    else:
        st.markdown("### üéØ Next Milestones")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Actions milestone
        if actions_count < 5:
            progress = actions_count / 5
            remaining = 5 - actions_count
            st.markdown(f"**{'Prvn√≠ 5 akc√≠' if language == 'czech' else 'First 5 Actions'}**")
            st.progress(progress)
            st.markdown(f"{'Zb√Ωv√°' if language == 'czech' else 'Remaining'}: {remaining}")
        elif actions_count < 10:
            progress = actions_count / 10
            remaining = 10 - actions_count
            st.markdown(f"**{'Prvn√≠ 10 akc√≠' if language == 'czech' else 'First 10 Actions'}**")
            st.progress(progress)
            st.markdown(f"{'Zb√Ωv√°' if language == 'czech' else 'Remaining'}: {remaining}")
        else:
            st.success(f"‚úÖ {'10+ akc√≠ dokonƒçeno!' if language == 'czech' else '10+ actions completed!'}")
    
    with col2:
        # Time milestone
        if time_contributed < 600:  # Less than 10 hours
            progress = time_contributed / 600
            remaining_hours = (600 - time_contributed) / 60
            st.markdown(f"**{'10 hodin pomoci' if language == 'czech' else '10 Hours of Help'}**")
            st.progress(progress)
            st.markdown(f"{'Zb√Ωv√°' if language == 'czech' else 'Remaining'}: {remaining_hours:.1f}h")
        else:
            st.success(f"‚úÖ {'10+ hodin dokonƒçeno!' if language == 'czech' else '10+ hours completed!'}")
    
    st.markdown("---")
    
    # Completed actions history
    if st.session_state.actions_completed:
        if language == 'czech':
            st.markdown("### üìú Historie va≈°ich akc√≠")
        else:
            st.markdown("### üìú Your Action History")
        
        for i, action in enumerate(reversed(st.session_state.actions_completed[-10:])):  # Show last 10
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #F8FBF8 0%, #F0F6F0 100%);
                border-left: 4px solid #7AB87A;
                padding: 1rem;
                margin: 0.5rem 0;
                border-radius: 6px;
            ">
                <strong>#{len(st.session_state.actions_completed) - i}</strong> {action}
            </div>
            """, unsafe_allow_html=True)
    else:
        if language == 'czech':
            st.info("üå± Va≈°e prvn√≠ akce bude zde! Zaƒçnƒõte na str√°nce rychl√Ωch akc√≠.")
        else:
            st.info("üå± Your first action will appear here! Start on the quick actions page.")
    
    st.markdown("---")
    
    # Personal impact visualization
    if actions_count > 0:
        if language == 'czech':
            st.markdown("### üåç V√°≈° dopad v ƒç√≠slech")
            st.markdown("""
            **Co jste u≈æ dok√°zali:**
            - üå± Pomohli jste zlep≈°it ≈æivot dal≈°√≠ch lid√≠ nebo komunit
            - ‚è∞ Investovali jste sv≈Øj ƒças do smyslupln√Ωch aktivit  
            - üíö P≈ôispƒõli jste k pozitivn√≠m zmƒõn√°m ve spoleƒçnosti
            - üåü Stali jste se p≈ô√≠kladem pro ostatn√≠
            """)
            
            # Estimated impact
            if actions_count >= 3:
                estimated_people_helped = actions_count * 2.5  # Rough estimate
                st.markdown(f"""
                **Odhadovan√Ω celkov√Ω dopad:**
                - üë• Pravdƒõpodobnƒõ jste pozitivnƒõ ovlivnili {estimated_people_helped:.0f} lid√≠
                - üåä V√°≈° p≈ô√≠klad mohl inspirovat dal≈°√≠ {actions_count} lid√≠ k akci
                - üîÑ Vytvo≈ôili jste pozitivn√≠ spir√°lu zmƒõn ve sv√©m okol√≠
                """)
        else:
            st.markdown("### üåç Your Impact in Numbers")
            st.markdown("""
            **What you've already accomplished:**
            - üå± You've helped improve the lives of other people or communities
            - ‚è∞ You've invested your time in meaningful activities
            - üíö You've contributed to positive changes in society
            - üåü You've become an example for others
            """)
            
            # Estimated impact
            if actions_count >= 3:
                estimated_people_helped = actions_count * 2.5  # Rough estimate
                st.markdown(f"""
                **Estimated Total Impact:**
                - üë• You've likely positively affected {estimated_people_helped:.0f} people
                - üåä Your example may have inspired {actions_count} others to take action
                - üîÑ You've created a positive spiral of change in your community
                """)
    
    # Success stories for inspiration
    if actions_count >= 2:
        st.markdown("---")
        if language == 'czech':
            st.markdown("### üåü Inspirace od ostatn√≠ch")
        else:
            st.markdown("### üåü Inspiration from Others")
        
        encouragement_data = load_encouragement_data(language)
        success_stories = encouragement_data.get("success_stories", [])
        
        if success_stories:
            story = random.choice(success_stories)
            st.markdown(f"""
            <div class="success-story">
                <h4>üéØ {story.get('name', 'Anonymn√≠')}</h4>
                <p><strong>P≈ô√≠bƒõh:</strong> {story.get('story', '')}</p>
                <p><strong>Dopad:</strong> {story.get('impact', '')}</p>
                <p><strong>ƒåasov√Ω r√°mec:</strong> {story.get('timeframe', '')}</p>
            </div>
            """, unsafe_allow_html=True)
    
    # Motivational CTA
    st.markdown("---")
    st.markdown(f"""
    <div class="cta-section">
        <h3>{'üöÄ P≈ôipraveni na dal≈°√≠ akci?' if language == 'czech' else 'üöÄ Ready for your next action?'}</h3>
        <p>{'Momentum je kl√≠ƒçov√Ω. Ka≈æd√° dal≈°√≠ akce je snaz≈°√≠ ne≈æ ta p≈ôedchoz√≠!' if language == 'czech' else 'Momentum is key. Each action gets easier than the last!'}</p>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button(
            f"‚ö° {'Rychl√© akce' if language == 'czech' else 'Quick Actions'}",
            type="primary",
            use_container_width=True
        ):
            st.session_state.quick_action_requested = True
            st.rerun()
    
    with col2:
        if st.button(
            f"üß≠ {'Naj√≠t nov√© p≈ô√≠le≈æitosti' if language == 'czech' else 'Find New Opportunities'}",
            use_container_width=True
        ):
            st.session_state.assessment_step = 1
            st.rerun()
    
    # Reflection prompt
    if actions_count >= 1:
        st.markdown("---")
        encouragement_data = load_encouragement_data(language)
        reflection_prompts = encouragement_data.get("reflection_prompts", [])
        
        if reflection_prompts:
            prompt = random.choice(reflection_prompts)
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #F5F8F5 0%, #EDF2ED 100%);
                border: 1px solid #D4E7D4;
                border-radius: 12px;
                padding: 1.5rem;
                margin: 1rem 0;
                text-align: center;
            ">
                <h4 style="color: #2E5D31;">üí≠ {'Chvilka na zamy≈°len√≠' if language == 'czech' else 'Moment for Reflection'}</h4>
                <p style="font-style: italic; font-size: 1.1rem;">{prompt}</p>
            </div>
            """, unsafe_allow_html=True)

def show_causes_page():
    """Causes exploration with Czech adaptation"""
    language = st.session_state.language
    
    if language == 'czech':
        st.markdown('<h1 class="main-header">üåç Prozkoumat oblasti</h1>', unsafe_allow_html=True)
    else:
        st.markdown('<h1 class="main-header">üåç Explore Causes</h1>', unsafe_allow_html=True)
    
    causes_data = load_causes_data(language)
    
    if not causes_data:
        error_text = "Nelze naƒç√≠st data o oblastech." if language == 'czech' else "Unable to load causes data."
        st.error(error_text)
        return
    
    for cause_id, cause_info in causes_data.items():
        with st.expander(f"{cause_info.get('emoji', 'üéØ')} {cause_info.get('title', 'Unknown Cause')}"):
            st.markdown(cause_info.get('description', 'No description available'))
            
            # Show some stats
            col1, col2 = st.columns(2)
            with col1:
                urgency = cause_info.get('time_sensitivity', 'ongoing')
                if language == 'czech':
                    st.markdown(f"**Nal√©havost:** {urgency.title()}")
                    scope = cause_info.get('geographic_scope', 'varies')
                    st.markdown(f"**Geografick√Ω rozsah:** {scope.title()}")
                else:
                    st.markdown(f"**Urgency Level:** {urgency.title()}")
                    scope = cause_info.get('geographic_scope', 'varies')
                    st.markdown(f"**Geographic Scope:** {scope.title()}")
            
            with col2:
                # Show learning resources
                resources = cause_info.get('learning_resources', [])
                if resources:
                    learn_text = "**Dozvƒõdƒõt se v√≠ce:**" if language == 'czech' else "**Learn More:**"
                    st.markdown(learn_text)
                    for resource in resources[:2]:
                        st.markdown(f"‚Ä¢ [{resource.get('title', 'Resource')}]({resource.get('url', '#')})")

if __name__ == "__main__":
    main() 