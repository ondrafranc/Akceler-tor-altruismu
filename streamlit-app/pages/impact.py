"""Impact page - tracking and celebrating user contributions"""

import streamlit as st
from utils.localization import get_text
from logic.tracking import get_milestone_achievements, calculate_estimated_impact
from datetime import datetime, timedelta

def show_impact_page():
    """A page to reflect on the user's impact, as a story with clear milestones and next steps."""
    language = st.session_state.language
    st.markdown(f'<h1 class="main-header">{get_text("my_impact", language)}</h1>', unsafe_allow_html=True)
    st.markdown(f'<p class="sub-header">{get_text("subtitle", language)}</p>', unsafe_allow_html=True)
    actions_count = st.session_state.total_impact['actions']
    if actions_count == 0:
        _show_getting_started_content(language)
    else:
        _show_impact_details(language)

def _show_getting_started_content(language):
    """Show gentle, encouraging content for users who haven't started yet."""
    
    if language == 'czech':
        st.info("""
        ### Va≈°e prvn√≠ kapitola ƒçek√° na naps√°n√≠.
        
        Pr√°zdn√° str√°nka nen√≠ zn√°mkou neƒçinnosti, ale p≈ô√≠le≈æitosti. Jste na zaƒç√°tku cesty, a to je to nejlep≈°√≠ m√≠sto, kde zaƒç√≠t. Ka≈æd√Ω velk√Ω p≈ô√≠bƒõh pomoci zaƒçal jedn√≠m mal√Ωm krokem.
        
        **Jste p≈ôipraveni napsat prvn√≠ vƒõtu?**
        """)
    else:
        st.info("""
        ### Your first chapter is waiting to be written.
        
        An empty page isn't a sign of inaction, but of opportunity. You are at the beginning of a journey, and that's the best place to start. Every great story of help began with a single, small step.
        
        **Are you ready to write the first sentence?**
        """)
        
    col1, col2 = st.columns(2)
    with col1:
        if st.button(f"‚ö° {get_text('get_quick_help', language)}", type="primary", use_container_width=True):
            st.session_state.quick_action_requested = True
            st.rerun()
    
    with col2:
        if st.button(f"üß≠ {get_text('take_assessment', language)}", use_container_width=True):
            st.session_state.assessment_step = 1
            st.session_state.current_page = 'assessment'
            st.rerun()

def _show_impact_details(language):
    """Show detailed impact with narrative framing."""
    actions_count = st.session_state.total_impact['actions']
    time_contributed = st.session_state.total_impact['time']
    money_donated = st.session_state.total_impact['money']

    # Main metrics display
    st.markdown("### Va≈°e shrnut√≠ dopadu")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            get_text('actions_taken', language),
            actions_count
        )
    
    with col2:
        hours = time_contributed // 60
        minutes = time_contributed % 60
        time_display = f"{hours}h {minutes}m" if hours > 0 else f"{minutes}m"
        st.metric(
            get_text('time_contributed', language), 
            time_display
        )
    
    with col3:
        if language == 'czech':
            money_display = f"{int(money_donated * 25)} Kƒç"
        else:
            money_display = f"${money_donated:.0f}"
        st.metric(
            get_text('money_donated', language),
            money_display
        )
    
    st.markdown("---")
    
    # Completed Actions Log - "Your Story So Far"
    if 'actions_completed' in st.session_state and st.session_state.actions_completed:
        if language == 'czech':
            st.markdown("### V√°≈° p≈ô√≠bƒõh pomoci zat√≠m...")
        else:
            st.markdown("### Your story of help so far...")
        
        # Display actions as a narrative log
        for i, action in enumerate(reversed(st.session_state.actions_completed[-5:])):  # Show last 5, most recent first
            timestamp = datetime.fromisoformat(action['timestamp'])
            time_ago = datetime.now() - timestamp
            
            if time_ago.days > 1:
                time_str = f"p≈ôed {time_ago.days} dny" if language == 'czech' else f"{time_ago.days} days ago"
            elif time_ago.days == 1:
                time_str = "vƒçera" if language == 'czech' else "yesterday"
            elif time_ago.seconds > 3600:
                hours = time_ago.seconds // 3600
                time_str = f"p≈ôed {hours}h" if language == 'czech' else f"{hours}h ago"
            else:
                minutes = max(1, time_ago.seconds // 60)
                time_str = f"p≈ôed {minutes} min" if language == 'czech' else f"{minutes} min ago"
            
            st.markdown(f"**{time_str}**: Jste dokonƒçili **'{action['title']}'** v oblasti '{action['category']}'.")
        st.markdown("---")

    # Estimated Broader Impact
    estimated_impact = calculate_estimated_impact(actions_count)
    if language == 'czech':
        st.markdown("### V√°≈° mo≈æn√Ω ≈°ir≈°√≠ dopad")
        st.markdown(f"""
        I mal√© akce maj√≠ vlnov√Ω efekt. Va≈°e ƒçiny mohly:
        - **Inspirovat ostatn√≠:** Va≈°e odhodl√°n√≠ m≈Ø≈æe motivovat lidi ve va≈°em okol√≠.
        - **P≈ôispƒõt k vƒõt≈°√≠ zmƒõnƒõ:** Jste souƒç√°st√≠ komunity, kter√° spoleƒçnƒõ ≈ôe≈°√≠ velk√© probl√©my.
        - **Ovlivnit ≈æivoty:** Odhaduje se, ≈æe va≈°e pomoc se mohla dotknout a≈æ **~{estimated_impact['people_affected']:.0f} lid√≠**.
        
        *Toto jsou odhady, kter√© v√°m maj√≠ uk√°zat, ≈æe i mal√© kroky maj√≠ velk√Ω potenci√°l.*
        """)
    else:
        st.markdown("### Your Potential Ripple Effect")
        st.markdown(f"""
        Even small actions create waves. Your efforts may have:
        - **Inspired others:** Your commitment can motivate those around you.
        - **Contributed to bigger change:** You are part of a community tackling large problems together.
        - **Affected lives:** It's estimated your help may have touched up to **~{estimated_impact['people_affected']:.0f} people**.
        
        *These are estimates to show you that even small steps have great potential.*
        """)
    
    # Check for milestones and celebrate
    milestones = get_milestone_achievements(actions_count, time_contributed, money_donated)
    if milestones:
        _show_milestone_celebrations(milestones, language)

def _show_milestone_celebrations(milestones, language):
    """Show milestone celebration messages in a more prominent way."""
    
    milestone_texts = {
        "first_action": (
            "üéâ Prvn√≠ krok na va≈°√≠ cestƒõ!", 
            "Congratulations on the first step of your journey!"
        ),
        "five_actions": (
            "üåü Skvƒõl√©! U≈æ 5 dokonƒçen√Ωch akc√≠!",
            "Amazing! You've completed 5 actions!"
        )
    }

    for milestone in milestones:
        if milestone in milestone_texts:
            if language == 'czech':
                st.success(f"**Miln√≠k dosa≈æen:** {milestone_texts[milestone][0]}")
            else:
                st.success(f"**Milestone Reached:** {milestone_texts[milestone][1]}") 