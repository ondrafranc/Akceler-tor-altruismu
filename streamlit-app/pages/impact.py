"""Clean and responsive impact page - your story of meaningful change"""

import streamlit as st
import random
from datetime import datetime, timedelta
from utils.localization import get_text, get_czech_proverb
from logic.encouragement import get_random_encouragement, get_milestone_celebration
from logic.tracking import get_user_streak, get_recent_actions, calculate_total_impact
from core.session import track_page_visit, get_user_behavior_insights, update_user_profile
import plotly.graph_objects as go
import plotly.express as px

def show_impact_page():
    """Clean and responsive impact experience"""
    language = st.session_state.language
    track_page_visit('impact')
    
    # Get user data
    total_impact = st.session_state.get('total_impact', {'actions': 0, 'estimated_reach': 0})
    behavior_insights = get_user_behavior_insights()
    
    # Header
    _render_header(language, total_impact)
    
    # Main content based on user's journey stage
    if total_impact['actions'] == 0:
        _show_beginning_story(language)
    else:
        _show_impact_story(language, total_impact, behavior_insights)
    
    # Always show next steps
    _show_next_steps(language, total_impact)

def _render_header(language, total_impact):
    """Clean header section"""
    actions_count = total_impact['actions']
    
    # Create centered header
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if language == 'czech':
            if actions_count == 0:
                st.markdown("# üìñ V√°≈° p≈ô√≠bƒõh pomoci")
                st.markdown("*Ka≈æd√Ω p≈ô√≠bƒõh m√° sv≈Øj zaƒç√°tek ‚Äì v√°≈° ƒçek√° na prvn√≠ kapitolu*")
            else:
                st.markdown("# üìñ V√°≈° p≈ô√≠bƒõh pomoci")
                st.markdown(f"*U≈æ jste napsali {actions_count} {'kapitolu' if actions_count == 1 else 'kapitoly' if actions_count < 5 else 'kapitol'} pozitivn√≠ zmƒõny*")
        else:
            if actions_count == 0:
                st.markdown("# üìñ Your story of help")
                st.markdown("*Every story has its beginning ‚Äì yours is waiting for the first chapter*")
            else:
                st.markdown("# üìñ Your story of help")
                st.markdown(f"*You've already written {actions_count} chapter{'s' if actions_count != 1 else ''} of positive change*")

def _show_beginning_story(language):
    """Clean beginning story for new users"""
    
    # Welcome section
    st.markdown("---")
    
    if language == 'czech':
        st.markdown("## üå± V√°≈° p≈ô√≠bƒõh zaƒç√≠n√° teƒè")
        st.markdown("*P≈ôedstavte si, ≈æe ka≈æd√° akce pomoci je jako mal√Ω k√°men hozen√Ω do klidn√© vody. Vytvo≈ô√≠ kruhy, kter√© se ≈°√≠≈ô√≠ d√°l, ne≈æ m≈Ø≈æete vidƒõt.*")
    else:
        st.markdown("## üå± Your story begins now")
        st.markdown("*Imagine that every helping action is like a small stone thrown into calm water. It creates circles that spread farther than you can see.*")
    
    # What awaits section with clean cards
    st.markdown("### Co v√°s ƒçek√°" if language == 'czech' else "### What awaits you")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        with st.container():
            st.markdown("#### üåü Prvn√≠ krok" if language == 'czech' else "#### üåü First step")
            st.markdown("Va≈°e prvn√≠ akce pomoci" if language == 'czech' else "Your first helping action")
    
    with col2:
        with st.container():
            st.markdown("#### üåä Vlnky zmƒõny" if language == 'czech' else "#### üåä Ripples of change")
            st.markdown("V√°≈° dopad se ≈°√≠≈ô√≠ d√°l" if language == 'czech' else "Your impact spreads further")
    
    with col3:
        with st.container():
            st.markdown("#### üåà Kr√°sn√Ω p≈ô√≠bƒõh" if language == 'czech' else "#### üåà Beautiful story")
            st.markdown("Ka≈æd√° akce m√° sv≈Øj v√Ωznam" if language == 'czech' else "Every action has meaning")
    
    # Call to action
    st.markdown("---")
    st.markdown("### üí´ P≈ôipraveni zaƒç√≠t?" if language == 'czech' else "### üí´ Ready to begin?")
    st.markdown("*V√°≈° prvn√≠ krok nemus√≠ b√Ωt velk√Ω ‚Äì staƒç√≠, kdy≈æ bude up≈ô√≠mn√Ω.*" if language == 'czech' else "*Your first step doesn't need to be big ‚Äì it just needs to be sincere.*")

def _show_impact_story(language, total_impact, behavior_insights):
    """Clean impact story for users with actions"""
    
    actions_count = total_impact['actions']
    
    # Impact summary with clean metrics
    _render_impact_summary(language, actions_count, total_impact)
    
    # Timeline if there are recent actions
    recent_actions = get_recent_actions(days=30)
    if recent_actions:
        _render_timeline(language, recent_actions)
    
    # Milestones
    _render_milestones(language, actions_count)
    
    # Personal reflections
    _render_personal_reflections(language, total_impact)
    
    # Encouragement
    _render_encouragement(language, actions_count)

def _render_impact_summary(language, actions_count, total_impact):
    """Clean impact summary with honest metrics"""
    
    st.markdown("---")
    st.markdown("## ‚ú® V√°≈° p≈ô√≠bƒõh v ƒç√≠slech" if language == 'czech' else "## ‚ú® Your story in numbers")
    
    # Calculate authentic metrics
    streak = get_user_streak()
    days_since_start = total_impact.get('days_since_start', 0)
    
    # Clean metrics display
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "üåü Kroky na cestƒõ" if language == 'czech' else "üåü Steps on path",
            actions_count
        )
    
    with col2:
        st.metric(
            "üå± Dn√≠ od zaƒç√°tku" if language == 'czech' else "üå± Days since start",
            days_since_start
        )
    
    with col3:
        st.metric(
            "üî• Dn√≠ v ≈ôadƒõ" if language == 'czech' else "üî• Days in a row",
            streak
        )
    
    # Journey description if available
    journey_description = total_impact.get('journey_description', '')
    if journey_description:
        st.info(f"üíö {journey_description}")

def _render_timeline(language, recent_actions):
    """Clean timeline of recent actions"""
    
    st.markdown("---")
    st.markdown("## üìÖ Va≈°e cesta pomoci" if language == 'czech' else "## üìÖ Your helping journey")
    st.markdown("*Ka≈æd√Ω krok na va≈°√≠ cestƒõ m√° sv≈Øj p≈ô√≠bƒõh*" if language == 'czech' else "*Every step on your journey has its story*")
    
    # Group actions by date
    actions_by_date = {}
    for action in recent_actions[-10:]:  # Show last 10 actions
        completed_at = action.get('completed_at')
        if isinstance(completed_at, str):
            try:
                date = datetime.fromisoformat(completed_at).date()
            except:
                date = datetime.now().date()
        else:
            date = completed_at.date() if completed_at else datetime.now().date()
        
        if date not in actions_by_date:
            actions_by_date[date] = []
        actions_by_date[date].append(action)
    
    # Display timeline with clean containers
    for date, actions in sorted(actions_by_date.items(), reverse=True):
        days_ago = (datetime.now().date() - date).days
        
        if language == 'czech':
            if days_ago == 0:
                date_text = "Dnes"
            elif days_ago == 1:
                date_text = "Vƒçera"
            else:
                date_text = f"P≈ôed {days_ago} dny"
        else:
            if days_ago == 0:
                date_text = "Today"
            elif days_ago == 1:
                date_text = "Yesterday"
            else:
                date_text = f"{days_ago} days ago"
        
        with st.container():
            st.markdown(f"### üìÖ {date_text}")
            
            for action in actions:
                action_title = action.get('title', 'Akce pomoci')
                st.markdown(f"‚úÖ {action_title}")

def _render_milestones(language, actions_count):
    """Clean milestones display"""
    
    st.markdown("---")
    st.markdown("## üèÜ Va≈°e miln√≠ky" if language == 'czech' else "## üèÜ Your milestones")
    st.markdown("*Ka≈æd√Ω miln√≠k je d≈Øvodem k oslavƒõ*" if language == 'czech' else "*Every milestone is a reason to celebrate*")
    
    milestones = [
        (1, "üå±", "Prvn√≠ krok" if language == 'czech' else "First step"),
        (3, "üåø", "Na spr√°vn√© cestƒõ" if language == 'czech' else "On the right path"),
        (5, "üå≥", "Rostouc√≠ dopad" if language == 'czech' else "Growing impact"),
        (10, "üèÜ", "Skuteƒçn√Ω pomocn√≠k" if language == 'czech' else "Real helper"),
        (20, "‚≠ê", "Inspirace pro ostatn√≠" if language == 'czech' else "Inspiration for others"),
        (50, "üíé", "Mistr pomoci" if language == 'czech' else "Master of help")
    ]
    
    # Display milestones in rows of 3
    for i in range(0, len(milestones), 3):
        cols = st.columns(3)
        for j, (threshold, emoji, name) in enumerate(milestones[i:i+3]):
            with cols[j]:
                is_achieved = actions_count >= threshold
                
                if is_achieved:
                    st.success(f"{emoji} **{name}** ({threshold} {'akc√≠' if language == 'czech' else 'actions'}) ‚úÖ")
                else:
                    st.info(f"{emoji} **{name}** ({threshold} {'akc√≠' if language == 'czech' else 'actions'})")
    
    # Show progress to next milestone
    next_milestone = next((m for m in milestones if actions_count < m[0]), None)
    if next_milestone:
        threshold, emoji, name = next_milestone
        remaining = threshold - actions_count
        progress = actions_count / threshold
        
        if language == 'czech':
            progress_text = f"Do dal≈°√≠ho miln√≠ku '{name}' v√°m zb√Ωv√° {remaining} {'akce' if remaining < 5 else 'akc√≠'}!"
        else:
            progress_text = f"You need {remaining} more action{'s' if remaining != 1 else ''} to reach '{name}'!"
        
        st.info(progress_text)
        st.progress(progress)

def _render_personal_reflections(language, total_impact):
    """Show personal reflections"""
    
    st.markdown("---")
    st.markdown("## üí≠ Va≈°e zamy≈°len√≠" if language == 'czech' else "## üí≠ Your reflections")
    
    personal_reflections = total_impact.get('personal_reflections', [])
    
    if personal_reflections:
        st.markdown("*Va≈°e my≈°lenky a pocity z cesty pomoci*" if language == 'czech' else "*Your thoughts and feelings from the helping journey*")
        
        # Show recent reflections
        for reflection in personal_reflections[-3:]:  # Show last 3
            reflection_date = reflection.get('date', '')
            reflection_text = reflection.get('reflection', '')
            
            if reflection_date and reflection_text:
                try:
                    date_obj = datetime.fromisoformat(reflection_date)
                    formatted_date = date_obj.strftime("%d.%m.%Y")
                except:
                    formatted_date = reflection_date
                
                with st.container():
                    st.markdown(f"**üìÖ {formatted_date}**")
                    st.markdown(f"> *{reflection_text}*")
    else:
        st.markdown("*Zat√≠m jste si nezapisovali ≈æ√°dn√° zamy≈°len√≠. Zkuste p≈ôidat nƒõjak√© p≈ôi p≈ô√≠≈°t√≠ akci!*" if language == 'czech' else "*You haven't recorded any reflections yet. Try adding some with your next action!*")
    
    # Encourage adding reflections
    if language == 'czech':
        st.info("üí° **Tip:** P≈ôi p≈ô√≠≈°t√≠ akci si zkuste zapsat, jak se c√≠t√≠te. Va≈°e my≈°lenky jsou d≈Øle≈æitƒõj≈°√≠ ne≈æ jak√°koliv ƒç√≠sla.")
    else:
        st.info("üí° **Tip:** Try writing down how you feel with your next action. Your thoughts are more important than any numbers.")

def _render_encouragement(language, actions_count):
    """Show encouragement section"""
    
    st.markdown("---")
    
    # Get appropriate encouragement
    if actions_count == 0:
        encouragement = get_random_encouragement("first_step_motivation", language)
    elif actions_count < 5:
        encouragement = get_random_encouragement("early_journey", language)
    else:
        encouragement = get_random_encouragement("experienced_helper", language)
    
    if encouragement:
        st.success(f"üíö {encouragement}")
    
    # Czech wisdom for inspiration
    if language == 'czech' and random.random() < 0.4:
        proverb = get_czech_proverb('impact')
        if proverb:
            st.info(f"üåø {proverb}")

def _show_next_steps(language, total_impact):
    """Show next steps section"""
    
    st.markdown("---")
    st.markdown("## üåü Va≈°e dal≈°√≠ kroky" if language == 'czech' else "## üåü Your next steps")
    st.markdown("*Ka≈æd√Ω krok na va≈°√≠ cestƒõ m√° sv≈Øj v√Ωznam*" if language == 'czech' else "*Every step on your journey has its meaning*")
    
    actions_count = total_impact['actions']
    
    if actions_count == 0:
        # For new users
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‚ö° Rychl√© akce" if language == 'czech' else "‚ö° Quick actions", use_container_width=True, type="primary"):
                st.session_state.current_page = 'quick_actions'
                st.rerun()
        
        with col2:
            if st.button("üß≠ Naj√≠t mou cestu" if language == 'czech' else "üß≠ Find my path", use_container_width=True):
                st.session_state.assessment_step = 1
                st.session_state.current_page = 'assessment'
                st.rerun()
    
    else:
        # For users with actions
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("‚ö° Dal≈°√≠ akce" if language == 'czech' else "‚ö° More actions", use_container_width=True, type="primary"):
                st.session_state.current_page = 'quick_actions'
                st.rerun()
        
        with col2:
            if st.button("üåç Prozkoumat oblasti" if language == 'czech' else "üåç Explore areas", use_container_width=True):
                st.session_state.current_page = 'causes'
                st.rerun()
        
        with col3:
            if st.button("üìñ Sd√≠let p≈ô√≠bƒõh" if language == 'czech' else "üìñ Share story", use_container_width=True):
                _show_sharing_section(language, actions_count)

def _show_sharing_section(language, actions_count):
    """Show sharing section"""
    
    with st.expander("üìñ Sd√≠let v√°≈° p≈ô√≠bƒõh pomoci" if language == 'czech' else "üìñ Share your helping story", expanded=True):
        if language == 'czech':
            st.markdown(f"""
            ### üåü V√°≈° p≈ô√≠bƒõh inspirace
            
            Dokonƒçili jste **{actions_count}** {'akci' if actions_count == 1 else 'akce' if actions_count < 5 else 'akc√≠'} pomoci!
            
            **V√°≈° dopad:**
            - ‚úÖ {actions_count} pozitivn√≠ch krok≈Ø
            - üåä Pozitivn√≠ vliv na komunitu
            - üíö Inspirace pro ostatn√≠
            
            *"Mal√© kroky, velk√© zmƒõny. Ka≈æd√° akce m√° sv≈Øj v√Ωznam."*
            """)
        else:
            st.markdown(f"""
            ### üåü Your inspiration story
            
            You've completed **{actions_count}** helping action{'s' if actions_count != 1 else ''}!
            
            **Your impact:**
            - ‚úÖ {actions_count} positive steps
            - üåä Positive influence on community
            - üíö Inspiration for others
            
            *"Small steps, big changes. Every action has its meaning."*
            """)
        
        # Simple sharing options
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üì± Sd√≠let na soci√°ln√≠ch s√≠t√≠ch" if language == 'czech' else "üì± Share on social media", use_container_width=True):
                if language == 'czech':
                    share_text = f"Pr√°vƒõ jsem dokonƒçil/a {actions_count} akc√≠ pomoci prost≈ôednictv√≠m Akceler√°toru altruismu! üåü Ka≈æd√Ω mal√Ω krok m√° v√Ωznam. #AkceleratorAltruismu #Pomoc"
                else:
                    share_text = f"Just completed {actions_count} helping actions through Altruism Accelerator! üåü Every small step matters. #AltruismAccelerator #Helping"
                
                st.code(share_text)
        
        with col2:
            if st.button("üìß Poslat p≈ô√°tel≈Øm" if language == 'czech' else "üìß Send to friends", use_container_width=True):
                if language == 'czech':
                    email_text = f"Ahoj! Chtƒõl/a jsem se podƒõlit o kr√°snou vƒõc - dokonƒçil/a jsem {actions_count} akc√≠ pomoci a c√≠t√≠m se skvƒõle! Mo≈æn√° by tƒõ zaj√≠malo tak√© zaƒç√≠t: [odkaz na aplikaci]"
                else:
                    email_text = f"Hi! I wanted to share something beautiful - I completed {actions_count} helping actions and feel great! Maybe you'd be interested in starting too: [app link]"
                
                st.code(email_text) 